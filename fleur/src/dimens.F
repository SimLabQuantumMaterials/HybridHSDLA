      MODULE m_dimens
      CONTAINS
      SUBROUTINE dimens(
     >                  irank,ivers,gw,gw_neigd,
     <                  nop,k1d,k2d,k3d,n3d,n2d,
     <                  kq1d,kq2d,kq3d,kxc1d,kxc2d,kxc3d,
     <                  ntypd,natd,jmtd,ntypsd,nlhd,memd,
     <                  lmaxd,jspd,nvacd,nmzd,nmzxyd,nspd,
     <                  nvd,nv2d,nwdd,nkptd,
     <                  neigd,msh,nstd,ncvd,layerd,nlod,llod,odd,
     <                  itmax)

      USE m_od_types, ONLY : od_dim
      USE m_dimen7
      USE m_firstglance
      IMPLICIT NONE

      INTEGER, INTENT (INOUT) :: irank,gw,gw_neigd
      CHARACTER(len=9), INTENT (IN)  :: ivers
      INTEGER, INTENT (OUT) :: nop,k1d,k2d,k3d,n3d,n2d
      INTEGER, INTENT (OUT) :: kq1d,kq2d,kq3d
      INTEGER, INTENT (OUT) :: kxc1d,kxc2d,kxc3d
      INTEGER, INTENT (OUT) :: ntypd,natd,jmtd
      INTEGER, INTENT (OUT) :: ntypsd,nlhd,memd
      INTEGER, INTENT (OUT) :: lmaxd
      INTEGER, INTENT (OUT) :: jspd,nvacd
      INTEGER, INTENT (OUT) :: nmzd,nmzxyd
      INTEGER, INTENT (OUT) :: nspd
      INTEGER, INTENT (OUT) :: nvd,nv2d,nwdd,nkptd
      INTEGER, INTENT (OUT) :: neigd
      INTEGER, INTENT (OUT) :: msh,nstd
      INTEGER, INTENT (OUT) :: ncvd
      INTEGER, INTENT (OUT) :: layerd
      INTEGER, INTENT (OUT) :: nlod,llod
      TYPE (od_dim), INTENT (OUT) :: odd
      INTEGER, INTENT (OUT) :: itmax

      LOGICAL l_dimen7,l_kpts,l_qpts,l_inpexist
      INTEGER n1,n2,n3,n4,n5,n6,n7,n8(3),n9,n10(3),i,j
      CHARACTER(len=9) :: cppflag(9)
#ifdef CPP_MPI
      INCLUDE 'mpif.h'
      INTEGER ierr(3)
#endif
      odd%d1=.TRUE.
      l_kpts=.TRUE.

      IF (irank.EQ.0) THEN

      WRITE (6,*) 'This output is generated by ',ivers,'  * * '
#if ( defined(CPP_AIX) )
      WRITE (6,*)  '                                    * \\:/ *'
#else
      WRITE (6,*)  '                                    * \:/ *'
#endif
      WRITE (6,*)  '                                    *  |  *'
      WRITE (6,*)  '                                      * *  '
      WRITE (6,*) 

        i = 0               ! First determine the architecture
#ifdef CPP_APC
        i = i + 1
        cppflag(i) = 'APC'
#endif
#ifdef CPP_DEC
        i = i + 1
        cppflag(i) = 'DEC'
#endif
#ifdef CPP_AIX
        i = i + 1
        cppflag(i) = 'AIX'
#endif
#ifdef CPP_T90
        i = i + 1
#ifdef CPP_MPI
        cppflag(i) = 'T3E'
#else
        cppflag(i) = 'T90'
#endif
#endif
        IF (i.GT.1) THEN 
          WRITE (6,*) 'You set compiler flags for more than one'
          WRITE (6,*) 'architecture: ', (cppflag(j),j=1,i)
          WRITE (6,*) 'Ddefine only one system architecture! '
          STOP ' define only one system architecture! '
        ENDIF
        IF (i == 0) THEN
          WRITE (6,*) 'No system architecture specified in Makefile'
          cppflag(1) = 'GEN'
        ENDIF 
!
!       check for double precision etc.
!
#ifdef CPP_DOUBLE                
        cppflag(2) = 'DOUBLE'        
#else
        cppflag(2) = 'SINGLE'
#ifndef CPP_T90
        STOP ' define CPP_DOUBLE on non-Cray architectures !'
#endif
#endif
        WRITE (6,'(16a,4a,5a,7a,11a)') 'You compiled for ',
     +        trim(cppflag(1)),' with ',trim(cppflag(2)),' precision,'
#ifdef CPP_INVERSION
        cppflag(1) = 'with'
#else
        cppflag(1) = 'without'
#endif
#ifdef CPP_SOC
        cppflag(2) = 'with'
#else
        cppflag(2) = 'without'
#endif
        WRITE (6,'(12a,7a,15a,7a,5a)') 'for systems ',
     +  trim(cppflag(1)),' INVERSION and ',trim(cppflag(2)),' SOC.'
        i = 0
#ifdef CPP_MPI
        i = i + 1
        cppflag(i) = 'CPP_MPI'
#endif
#ifdef CPP_APW
        i = i + 1
        cppflag(i) = 'CPP_APW'
#endif
#ifdef CPP_CORE
        i = i + 1
        cppflag(i) = 'CPP_CORE'
#endif
#ifdef CPP_HTML
        i = i + 1
        cppflag(i) = 'CPP_HTML'
#endif
#ifdef CPP_HDF
        i = i + 1
        cppflag(i) = 'CPP_HDF'
#endif
#ifdef CPP_F90
        i = i + 1
        cppflag(i) = 'CPP_F90'
#endif
#ifdef CPP_WANN
        i = i + 1
        cppflag(i) = 'CPP_WANN'
#endif
#ifdef CPP_600
        i = i + 1
        cppflag(i) = 'CPP_600'
#endif
#ifdef CPP_GF
        i = i + 1
        cppflag(i) = 'CPP_GF'
#endif
        IF (i.GT.0) THEN
           WRITE (6,*) 'Additional flags are: ', (cppflag(j),j=1,i)
        ENDIF
        WRITE (6,*) 'Your parameters: '
      ENDIF

      l_dimen7 = .false.
   10 OPEN (1,file='fl7para',form='formatted',status='old',err=200) ! Last two keys added to avoid creation of an empty file 'fl7para'

      READ (1,*,ERR=200,END=200)     
      READ (1,901,ERR=200,END=200) nop,k1d,k2d,k3d,n3d,n2d
      IF (IRANK.EQ.0) WRITE (6,1001) nop,k1d,k2d,k3d,n3d,n2d
  901 FORMAT (22x,i2,5x,i3,5x,i3,5x,i3,5x,i6,5x,i4)
 1001 FORMAT (6x,'parameter (nop= ',i2,',k1d=',i3,',k2d=',i3,',k3d=',
     +   i3,',n3d=',i6,',n2d=',i4,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,910,ERR=200,END=200) kq1d,kq2d,kq3d
      IF (IRANK.EQ.0) WRITE (6,1010) kq1d,kq2d,kq3d
  910 FORMAT (22x,i3,6x,i3,6x,i3)
 1010 FORMAT (6x,'parameter (kq1d=',i3,',kq2d=',i3,',kq3d=',i3,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,914,ERR=200,END=200) kxc1d,kxc2d,kxc3d
      IF (IRANK.EQ.0) WRITE (6,1014) kxc1d,kxc2d,kxc3d
  914 FORMAT (23x,i3,7x,i3,7x,i3)
 1014 FORMAT (6x,'parameter (kxc1d=',i3,',kxc2d=',i3,',kxc3d=',i3,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,902,ERR=200,END=200) ntypd,natd,jmtd
      IF (IRANK.EQ.0) WRITE (6,1002) ntypd,natd,jmtd
  902 FORMAT (23x,i3,6x,i3,6x,i4)
 1002 FORMAT (6x,'parameter (ntypd=',i3,',natd=',i3,',jmtd=',i4,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,903,ERR=200,END=200) ntypsd,nlhd,memd
      IF (IRANK.EQ.0) WRITE (6,1003) ntypsd,nlhd,memd
  903 FORMAT (24x,i3,6x,i3,6x,i2)
 1003 FORMAT (6x,'parameter (ntypsd=',i3,',nlhd=',i3,',memd=',i2,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,904,ERR=200,END=200) lmaxd
      IF (IRANK.EQ.0) WRITE (6,1004) lmaxd
  904 FORMAT (23x,i2)
 1004 FORMAT (6x,'parameter (lmaxd=',i2,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,905,ERR=200,END=200) jspd,nvacd
      IF (IRANK.EQ.0) WRITE (6,1005) jspd,nvacd
  905 FORMAT (22x,i1,7x,i1)
 1005 FORMAT (6x,'parameter (jspd=',i1,',nvacd=',i1,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,906,ERR=200,END=200) nmzd,nmzxyd
      IF (IRANK.EQ.0) WRITE (6,1006) nmzd,nmzxyd
  906 FORMAT (22x,i3,8x,i3)
 1006 FORMAT(6x,'parameter (nmzd=',i3,',nmzxyd=',i3,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,909,ERR=200,END=200) nvd,nv2d,nwdd,nkptd
      IF (IRANK.EQ.0) WRITE (6,1009) nvd,nv2d,nwdd,nkptd
  909 FORMAT (21x,i5,6x,i4,6x,i1,7x,i5,6x,i4)
 1009 FORMAT(6x,'parameter (nvd=',i5,',nv2d=',i4,',nwdd=',
     +  i1,',nkptd=',i5,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,911,ERR=200,END=200) neigd,neigd
      IF (IRANK.EQ.0) WRITE (6,1011) neigd,neigd
  911 FORMAT (22x,i4,7x,i4)
 1011 FORMAT(6x,'parameter (nobd=',i4,',neigd=',i4,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,912,ERR=200,END=200) msh,nstd
      IF (IRANK.EQ.0) WRITE (6,1012) msh,nstd
  912 FORMAT (21x,i4,6x,i2)
 1012 FORMAT(6x,'parameter (msh=',i4,',nstd=',i2,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,913,ERR=200,END=200) ncvd
      IF (IRANK.EQ.0) WRITE (6,1013) ncvd
  913 FORMAT (22x,i3)
 1013 FORMAT(6x,'parameter (ncvd=',i3,')')

      READ (1,*,ERR=200,END=200)     
      READ (1,915,ERR=200,END=200) layerd
      IF (IRANK.EQ.0) WRITE (6,'(6x,''parameter(layerd='',i3,'')'')') 
     +                       layerd
  915 FORMAT (23x,i3)

      READ (1,*,ERR=200,END=200)    
      READ (1,916,ERR=200,END=200) nlod,llod
      IF (IRANK.EQ.0) WRITE (6,1016) nlod,llod
  916 FORMAT (22x,i3,6x,i3)
 1016 FORMAT(6x,'parameter (nlod=',i3,',llod=',i3,')')
c-odim
      IF (odd%d1) THEN
      READ (1,*,ERR=200,END=200)
      READ (1,917,ERR=200,END=200) odd%mb,odd%M,odd%m_cyl,odd%chi,
     &     odd%rot,odd%nop,odd%n2d,odd%d1
      IF (IRANK.EQ.0) WRITE (6,1017) odd%mb,odd%M,odd%m_cyl,odd%chi,
     &     odd%rot,odd%nop,odd%n2d,odd%d1
 917  FORMAT (20x,i3,4x,i3,7x,i3,5x,i3,5x,i3,5x,i3,5x,i6,4x,l1)
 1017 FORMAT (6x,'parameter (vM=',i3,',MM=',i3,',m_cyl=',i3,
     &     ',chi=',i3,
     &     ',rot=',i3,',nop=',i3,',n2d=',i6,',d1=',l1,')')
c+odim
      END IF
      nspd=(lmaxd+1+mod(lmaxd+1,2))*(2*lmaxd+1)
      CLOSE (1)
      IF (irank.EQ.0) THEN

        INQUIRE (file='inp',exist=l_inpexist)
        IF (.not.l_inpexist) THEN
          INQUIRE (file='input',exist=l_inpexist)
          IF (.not.l_inpexist) THEN
            STOP 'no inp- or input-file found!'
          ENDIF
!         CALL inp_gen()
        ENDIF

        WRITE (6,*)
        CALL first_glance(
     <                    n1,n2,n3,n4,n5,n6,itmax,
     <                    l_kpts,l_qpts,n7,n8,n9,n10)
c
        IF (n1.GT.ntypd)  STOP 'ntypd  too small in fl7para'
        IF (n2.LT.24) THEN
        IF (n2.GT.nop )   STOP 'nop    too small in fl7para'
        ENDIF
        IF (n3.GT.natd )  STOP 'natd   too small in fl7para'
        IF (n4.GT.nwdd )  STOP 'nwdd   too small in fl7para'
        IF (n5.GT.nlod )  STOP 'nlod   too small in fl7para'
        IF (n6.GT.layerd) STOP 'layerd too small in fl7para'
        IF ((.not.l_kpts).OR.(.not.l_qpts))  GOTO 200
      ENDIF

      RETURN
 200  CONTINUE

      CLOSE (1)
      IF (l_dimen7) STOP 'repeated error reading fl7para!'

      IF (irank.EQ.0) THEN
        IF (l_kpts) WRITE (6,*) ' Error reading fl7para-file '
        WRITE (6,*) ' invoking dimen7... '

        CALL dimen7(
     >              gw,gw_neigd,    
     <              nop,k1d,k2d,k3d,n3d,n2d,
     <              kq1d,kq2d,kq3d,kxc1d,kxc2d,kxc3d,
     <              ntypd,natd,jmtd,ntypsd,nlhd,memd,
     <              lmaxd,jspd,nvacd,
     <              nvd,nv2d,nwdd,nkptd,nstd,
     <              neigd,msh,ncvd,layerd,nlod,llod,
     <              odd)

      ENDIF

#ifdef CPP_MPI
         CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)
#endif
      l_dimen7 = .true.
      GOTO 10

      END SUBROUTINE dimens
      END MODULE m_dimens
